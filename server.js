const express = require('express');
const cors = require('cors');
const axios = require('axios');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±—É–¥—É—Ç –≤ .env –Ω–∞ Glitch)
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!BOT_TOKEN || !ADMIN_ID || !SUPABASE_URL || !SUPABASE_KEY) {
  console.error('‚ö†Ô∏è  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ!');
}

// API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram (–±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
app.post('/api/send-order', async (req, res) => {
  try {
    const { 
      orderId, 
      date, 
      customerName, 
      customerPhone, 
      customerComment,
      telegramUserId, 
      telegramUsername, 
      items, 
      total,
      paymentEnabled,
      kaspiPhone,
      kaspiLink
    } = req.body;

    if (!orderId || !items || !total) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞' });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ!)
    let message = "üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>\n\n";
    message += `üìã –ó–∞–∫–∞–∑ #${orderId.slice(-6)}\n`;
    message += `üìÖ ${new Date(date).toLocaleString('ru-RU')}\n\n`;
    
    message += "<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b>\n";
    message += `–ò–º—è: ${customerName}\n`;
    message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${customerPhone}\n`;
    if (telegramUsername) message += `Telegram: @${telegramUsername}\n`;
    if (telegramUserId) message += `ID: ${telegramUserId}\n`;
    if (customerComment) message += `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${customerComment}\n`;
    
    message += "\n<b>üõí –¢–æ–≤–∞—Ä—ã:</b>\n";
    items.forEach(item => {
      message += `‚Ä¢ ${item.name} x${item.quantity} = ${item.price * item.quantity} ‚Ç∏\n`;
    });
    
    message += `\n<b>üí∞ –ò—Ç–æ–≥–æ: ${total} ‚Ç∏</b>`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∞–¥–º–∏–Ω—É
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: ADMIN_ID,
      text: message,
      parse_mode: 'HTML'
    });

    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –∏ –µ—Å—Ç—å telegram_user_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç—É
    if (paymentEnabled && telegramUserId) {
      let paymentMessage = "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã / –¢”©–ª–µ–º –¥–µ—Ä–µ–∫—Ç–µ–º–µ–ª–µ—Ä—ñ</b>\n\n";
      paymentMessage += `üìã –ó–∞–∫–∞–∑ / –¢–∞–ø—Å—ã—Ä—ã—Å #${orderId.slice(-6)}\n`;
      paymentMessage += `üí∞ –°—É–º–º–∞ / –°–æ–º–∞—Å—ã: <b>${total} ‚Ç∏</b>\n\n`;
      
      if (kaspiPhone) {
        paymentMessage += `üì± <b>Kaspi –Ω–æ–º–µ—Ä:</b>\n+7${kaspiPhone}\n\n`;
      }
      
      paymentMessage += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞.\n";
      paymentMessage += "–¢”©–ª–µ–≥–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω —á–µ–∫—Ç—ñ“£ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã–Ω –¥“Ø–∫–µ–Ω –∏–µ—Å—ñ–Ω–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.\n\n";
      paymentMessage += "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! / –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑“ì–∞ —Ä–∞—Ö–º–µ—Ç! ‚ù§Ô∏è";

      const payload = {
        chat_id: telegramUserId,
        text: paymentMessage,
        parse_mode: 'HTML'
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Kaspi –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
      if (kaspiLink) {
        payload.reply_markup = {
          inline_keyboard: [[
            { text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Kaspi", url: kaspiLink }
          ]]
        };
      }

      await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, payload);
    }

    res.json({ success: true, message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞',
      details: error.message 
    });
  }
});

// API: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É)
app.post('/api/notify-status', async (req, res) => {
  try {
    const { userId, status, orderNumber, shopPhone } = req.body;

    if (!userId || !status || !orderNumber) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    let message = '';
    
    switch (status) {
      case 'processing':
        message = `‚è≥ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É! / –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ –æ—Ä—ã–Ω–¥–∞–ª—É–¥–∞!</b>\n\n`;
        message += `üìã –ó–∞–∫–∞–∑ / –¢–∞–ø—Å—ã—Ä—ã—Å #${orderNumber}\n`;
        message += `–ú—ã –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –°–∫–æ—Ä–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤! üë®‚Äçüç≥\n`;
        message += `–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã –¥–∞–π—ã–Ω–¥–∞—É–¥—ã –±–∞—Å—Ç–∞–¥—ã“õ. –ñ–∞“õ—ã–Ω–¥–∞ –¥–∞–π—ã–Ω –±–æ–ª–∞–¥—ã!`;
        break;
        
      case 'completed':
        message = `üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! / –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ –¥–∞–π—ã–Ω!</b>\n\n`;
        message += `üìã –ó–∞–∫–∞–∑ / –¢–∞–ø—Å—ã—Ä—ã—Å #${orderNumber}\n`;
        message += `–ú–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞! üöó\n`;
        message += `–ê–ª—ã–ø –∫–µ—Ç—É–≥–µ –±–æ–ª–∞–¥—ã –Ω–µ–º–µ—Å–µ –∫—É—Ä—å–µ—Ä–¥—ñ –∫“Ø—Ç—ñ“£—ñ–∑!\n\n`;
        message += `–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! / –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑“ì–∞ —Ä–∞—Ö–º–µ—Ç! ‚ù§Ô∏è`;
        break;
        
      case 'cancelled':
        message = `‚ùå <b>–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω / –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ –∂–æ–π—ã–ª–¥—ã</b>\n\n`;
        message += `üìã –ó–∞–∫–∞–∑ / –¢–∞–ø—Å—ã—Ä—ã—Å #${orderNumber}\n`;
        message += `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è.\n`;
        message += `”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã –æ—Ä—ã–Ω–¥–∞–π –∞–ª–º–∞–π–º—ã–∑. –ö–µ—à—ñ—Ä—ñ–º —Å“±—Ä–∞–π–º—ã–∑.\n\n`;
        if (shopPhone) {
          message += `–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: ${shopPhone}\n`;
          message += `–°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, –±—ñ–∑–±–µ–Ω —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑: ${shopPhone}`;
        }
        break;
        
      default:
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
    }

    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: userId,
      text: message,
      parse_mode: 'HTML'
    });

    res.json({ success: true });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
  }
});

// API: –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á Supabase (–±–µ–∑–æ–ø–∞—Å–Ω–æ - —ç—Ç–æ anon key)
app.get('/api/config', (req, res) => {
  res.json({
    supabaseUrl: SUPABASE_URL,
    supabaseKey: SUPABASE_KEY // –≠—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π anon key, –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
  });
});

// Healthcheck
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok',
    botConfigured: !!BOT_TOKEN,
    supabaseConfigured: !!(SUPABASE_URL && SUPABASE_KEY),
    adminConfigured: !!ADMIN_ID
  });
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok',
    botConfigured: !!BOT_TOKEN
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± Telegram Bot: ${BOT_TOKEN ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`üóÑÔ∏è  Supabase: ${SUPABASE_URL ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
});
