from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import asyncio
from supabase import create_client, Client

# –ù–ê–°–¢–†–û–ô–ö–ò
BOT_TOKEN = "8210216557:AAFeNn2-EW1nnbL-Ahyk3f1dpq3JjrlniCI"
CLIENT_APP_URL = "https://telegram-miniapp-fd6b.onrender.com"
ADMIN_APP_URL = "https://telegram-miniapp-fd6b.onrender.com/admin.html"
ADMIN_ID = 8086901919

# Supabase
SUPABASE_URL = "https://gtinslbrwdpqkxeibuqs.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd0aW5zbGJyd2RwcWt4ZWlidXFzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjExMjM1MjMsImV4cCI6MjA3NjY5OTUyM30.3LbYP6AcsQ-qVZtdMgH6pJYX0rWLFGSUmT6errUwJOY"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å Web App
    keyboard = [
        [KeyboardButton("üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=CLIENT_APP_URL))],
    ]
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏
    if user.id == ADMIN_ID:
        keyboard.append([KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", web_app=WebAppInfo(url=ADMIN_APP_URL))])
        keyboard.append([KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫—É—é! üéÇ\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ –≤–∫—É—Å–Ω–æ—Å—Ç–∏:",
        reply_markup=reply_markup
    )


async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /broadcast - –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if not context.args:
        await update.message.reply_text(
            "üì¢ <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/broadcast üéâ –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ —Ç–æ—Ä—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏!</code>\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
            parse_mode='HTML'
        )
        return
    
    message_text = ' '.join(context.args)
    await send_broadcast(update, context, message_text)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    text = update.message.text
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–†–∞—Å—Å—ã–ª–∫–∞"
    if text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" and user.id == ADMIN_ID:
        context.user_data['waiting_for_broadcast'] = True
        await update.message.reply_text(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML.\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å - –Ω–∞–ø–∏—à–∏—Ç–µ /cancel",
            parse_mode='HTML'
        )
        return
    
    # –ï—Å–ª–∏ –∂–¥—ë–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if context.user_data.get('waiting_for_broadcast') and user.id == ADMIN_ID:
        context.user_data['waiting_for_broadcast'] = False
        await send_broadcast(update, context, text)
        return
    
    # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
    await update.message.reply_text(
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π! ü§ñ\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω' —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑."
    )


async def send_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    await update.message.reply_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–æ–≤
        response = supabase.table('orders').select('telegram_user_id').execute()
        
        if not response.data:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∫–ª–∏–µ–Ω—Ç–æ–≤
        user_ids = list(set([order['telegram_user_id'] for order in response.data if order.get('telegram_user_id')]))
        
        total = len(user_ids)
        success = 0
        failed = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for user_id in user_ids:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    parse_mode='HTML'
                )
                success += 1
                # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä–≤–∞—Ç—å—Å—è –Ω–∞ –ª–∏–º–∏—Ç—ã Telegram
                await asyncio.sleep(0.05)  # 50–º—Å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed += 1
        
        # –û—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É
        await update.message.reply_text(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}",
            parse_mode='HTML'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    context.user_data.clear()
    await update.message.reply_text("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        orders_response = supabase.table('orders').select('*').execute()
        orders = orders_response.data or []
        
        total_orders = len(orders)
        total_revenue = sum([order.get('total', 0) for order in orders])
        unique_clients = len(set([order['telegram_user_id'] for order in orders if order.get('telegram_user_id')]))
        
        # –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
        new_orders = len([o for o in orders if o.get('status') == 'new'])
        processing = len([o for o in orders if o.get('status') == 'processing'])
        completed = len([o for o in orders if o.get('status') == 'completed'])
        
        message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
            f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,} ‚Ç∏\n"
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {unique_clients}\n\n"
            f"<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
            f"üÜï –ù–æ–≤—ã–µ: {new_orders}\n"
            f"‚è≥ –í —Ä–∞–±–æ—Ç–µ: {processing}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}\n\n"
            f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {total_revenue // total_orders if total_orders > 0 else 0:,} ‚Ç∏"
        )
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    message = (
        "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/contact - –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
    )
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if update.effective_user.id == ADMIN_ID:
        message += (
            "<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "/broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        )
    
    message += "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω'"
    
    await update.message.reply_text(message, parse_mode='HTML')


async def contact_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /contact - –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    await update.message.reply_text(
        "üìû <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (777) 888-88-88\n"
        "Email: info@bakery.kz\n"
        "–ê–¥—Ä–µ—Å: –≥. –ê—Å—Ç–∞–Ω–∞, —É–ª. –ê—Å—Ç–∞–Ω–∞ 8\n\n"
        "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω-–í—Å: 09:00 - 21:00",
        parse_mode='HTML'
    )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("contact", contact_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("cancel", cancel_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ!)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì¢ –î–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
